import pandas as pd
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy

data = pd.DataFrame({
    'user_id': ['User1', 'User1', 'User1', 'User2', 'User2', 'User3', 'User3', 'User4', 'User4', 'User4'],
    'item_id': ['Item1', 'Item2', 'Item3', 'Item1', 'Item3', 'Item2', 'Item3', 'Item1', 'Item2', 'Item3'],
    'rating': [5, 3, 4, 4, 3, 2, 5, 2, 5, 4]
})

reader = Reader(rating_scale=(1, 5))
dataset = Dataset.load_from_df(data[['user_id', 'item_id', 'rating']], reader)
trainset, testset = train_test_split(dataset, test_size=0.25)

algo = SVD()
algo.fit(trainset)
predictions = algo.test(testset)
accuracy.rmse(predictions)

def get_top_n_recommendations(predictions, n=3):
    top_n = {}
    for uid, iid, true_r, est, _ in predictions:
        if uid not in top_n:
            top_n[uid] = []
        top_n[uid].append((iid, est))
    
    for uid, user_ratings in top_n.items():
        user_ratings.sort(key=lambda x: x[1], reverse=True)
        top_n[uid] = user_ratings[:n]
    
    return top_n

top_n_recommendations = get_top_n_recommendations(predictions, n=3)

for user, recommendations in top_n_recommendations.items():
    print(f"Top recommendations for {user}:")
    for item_id, estimated_rating in recommendations:
        print(f"  {item_id}: {estimated_rating:.2f}")
